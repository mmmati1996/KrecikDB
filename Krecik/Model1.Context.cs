

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace Krecik
{

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;

using System.Data.Entity.Core.Objects;
using System.Linq;


public partial class Model1Container : DbContext
{
    public Model1Container()
        : base("name=Model1Container")
    {

    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }


    public virtual DbSet<Dostawy> DostawySet { get; set; }

    public virtual DbSet<Dostawy_szczegoly> Dostawy_szczegolySet { get; set; }

    public virtual DbSet<Magazyn_glowny> Magazyn_glownySet { get; set; }

    public virtual DbSet<Kategorie_produktow> Kategorie_produktowSet { get; set; }

    public virtual DbSet<Identyfikatory_produktow> Identyfikatory_produktowSet { get; set; }

    public virtual DbSet<Zamowienia> ZamowieniaSet { get; set; }

    public virtual DbSet<Dostawcy> DostawcySet { get; set; }

    public virtual DbSet<Klienci> KlienciSet { get; set; }

    public virtual DbSet<Faktury> FakturySet { get; set; }

    public virtual DbSet<Imiona_Klientow_View> Imiona_Klientow_View { get; set; }


    public virtual int InsertNewKlient(string nazwisko, string imie, string nazwa_firmy, string kod_pocztowy, string miasto, string ulica, string nr_domu, string nr_lokalu)
    {

        var nazwiskoParameter = nazwisko != null ?
            new ObjectParameter("Nazwisko", nazwisko) :
            new ObjectParameter("Nazwisko", typeof(string));


        var imieParameter = imie != null ?
            new ObjectParameter("Imie", imie) :
            new ObjectParameter("Imie", typeof(string));


        var nazwa_firmyParameter = nazwa_firmy != null ?
            new ObjectParameter("Nazwa_firmy", nazwa_firmy) :
            new ObjectParameter("Nazwa_firmy", typeof(string));


        var kod_pocztowyParameter = kod_pocztowy != null ?
            new ObjectParameter("Kod_pocztowy", kod_pocztowy) :
            new ObjectParameter("Kod_pocztowy", typeof(string));


        var miastoParameter = miasto != null ?
            new ObjectParameter("Miasto", miasto) :
            new ObjectParameter("Miasto", typeof(string));


        var ulicaParameter = ulica != null ?
            new ObjectParameter("Ulica", ulica) :
            new ObjectParameter("Ulica", typeof(string));


        var nr_domuParameter = nr_domu != null ?
            new ObjectParameter("Nr_domu", nr_domu) :
            new ObjectParameter("Nr_domu", typeof(string));


        var nr_lokaluParameter = nr_lokalu != null ?
            new ObjectParameter("Nr_lokalu", nr_lokalu) :
            new ObjectParameter("Nr_lokalu", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertNewKlient", nazwiskoParameter, imieParameter, nazwa_firmyParameter, kod_pocztowyParameter, miastoParameter, ulicaParameter, nr_domuParameter, nr_lokaluParameter);
    }


    public virtual int DeleteKlient(Nullable<int> id_klienta)
    {

        var id_klientaParameter = id_klienta.HasValue ?
            new ObjectParameter("Id_klienta", id_klienta) :
            new ObjectParameter("Id_klienta", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteKlient", id_klientaParameter);
    }

}

}

